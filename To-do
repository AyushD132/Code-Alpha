#include <iostream>
#include <string>
#include <list>
#include <ctime>

class TodoItem {
private:
    int id;                         // Unique identifier for the todo item
    std::string description;        // Description of the todo item
    bool completed;                 // Flag indicating whether the todo item is completed or not

public:
    TodoItem() : id(0), description(""), completed(false) {}  // Constructor to initialize default values
    ~TodoItem() = default;                                    // Destructor

    bool create(std::string new_description) {
        // Generates a random integer between 1 and 100 to assign as ID
        id = rand() % 100 + 1;
        description = new_description;  // Assigns the provided description
        return true;                    // Returns true to indicate successful creation
    }

    int getId() { return id; }                      // Returns the ID of the todo item
    std::string getDescription() { return description; }  // Returns the description of the todo item
    bool isCompleted() { return completed; }              // Checks if the todo item is completed

    void setCompleted(bool val) { completed = val; }  // Sets the completion status of the todo item
};

int main()
{
    char input_option;
    int input_id;
    std::string input_description;
    std::string version = "v0.1.0";
    std::list<TodoItem> todoItems;                     // List to store todo items
    std::list<TodoItem>::iterator it;                  // Iterator for traversing the todo items

    srand(time(NULL));  // Seeds the random number generator

    todoItems.clear();  // Clears the list of todo items

    while (1) {
        system("cls");  // Clears the console screen
        std::cout << "Todo List - " << version << std::endl;
        std::cout << std::endl << std::endl;

        // Displaying all todo items
        for (it = todoItems.begin(); it != todoItems.end(); it++) {
            std::string completed = it->isCompleted() ? "done" : "not done";
            std::cout << it->getId() << " | " << it->getDescription() << " | " << completed << std::endl;
        }

        // Prompt for adding the first todo if the list is empty
        if (todoItems.empty()) {
            std::cout << "Add your first todo!" << std::endl;
        }

        std::cout << std::endl << std::endl;

        // Displaying menu options
        std::cout << "[a]dd a new Todo" << std::endl;
        std::cout << "[c]omplete a Todo" << std::endl;
        std::cout << "[v]iew all tasks" << std::endl;
        std::cout << "[q]uit" << std::endl;

        std::cout << "choice: ";

        std::cin >> input_option;  // Getting user input for menu choice

        if (input_option == 'q') {  // Quitting the program if 'q' is entered
            std::cout << "Have a great day now!" << std::endl;
            break;
        }
        else if (input_option == 'a') {  // Adding a new todo item
            std::cout << "Add a new description: ";
            std::cin.clear();
            std::cin.ignore();
            std::getline(std::cin, input_description);

            TodoItem newItem;
            newItem.create(input_description);  // Creating a new todo item
            todoItems.push_back(newItem);       // Adding the new todo item to the list
        }
        else if (input_option == 'c') {  // Completing a todo item
            std::cout << "Enter id to mark completed: ";
            std::cin >> input_id;

            for (it = todoItems.begin(); it != todoItems.end(); it++) {
                if (input_id == it->getId()) {
                    it->setCompleted(true);  // Marking the todo item as completed
                    break;
                }
            }
        }
        else if (input_option == 'v') {  // Viewing all todo items
            std::cout << "All tasks:" << std::endl;
            for (it = todoItems.begin(); it != todoItems.end(); it++) {
                std::cout << it->getId() << " | " << it->getDescription() << " | "
                          << (it->isCompleted() ? "done" : "not done") << std::endl;
            }
        }
    }

    return 0;
}
